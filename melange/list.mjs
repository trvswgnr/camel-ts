// Generated by Melange

import * as Caml_obj from "../melange.js/caml_obj.mjs";
import * as Caml_option from "../melange.js/caml_option.mjs";
import * as Curry from "../melange.js/curry.mjs";
import * as Stdlib from "./stdlib.mjs";

function length(l) {
  var _len = 0;
  var _param = l;
  while (true) {
    var param = _param;
    var len = _len;
    if (!param) {
      return len;
    }
    _param = param.tl;
    _len = (len + 1) | 0;
    continue;
  }
}

function cons(a, l) {
  return {
    hd: a,
    tl: l,
  };
}

function hd(param) {
  if (param) {
    return param.hd;
  }
  throw {
    RE_EXN_ID: "Failure",
    _1: "hd",
    Error: new Error(),
  };
}

function tl(param) {
  if (param) {
    return param.tl;
  }
  throw {
    RE_EXN_ID: "Failure",
    _1: "tl",
    Error: new Error(),
  };
}

function nth(l, n) {
  if (n < 0) {
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.nth",
      Error: new Error(),
    };
  }
  var _l = l;
  var _n = n;
  while (true) {
    var n$1 = _n;
    var l$1 = _l;
    if (l$1) {
      if (n$1 === 0) {
        return l$1.hd;
      }
      _n = (n$1 - 1) | 0;
      _l = l$1.tl;
      continue;
    }
    throw {
      RE_EXN_ID: "Failure",
      _1: "nth",
      Error: new Error(),
    };
  }
}

function nth_opt(l, n) {
  if (n < 0) {
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.nth",
      Error: new Error(),
    };
  }
  var _l = l;
  var _n = n;
  while (true) {
    var n$1 = _n;
    var l$1 = _l;
    if (!l$1) {
      return;
    }
    if (n$1 === 0) {
      return Caml_option.some(l$1.hd);
    }
    _n = (n$1 - 1) | 0;
    _l = l$1.tl;
    continue;
  }
}

function rev_append(_l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return l2;
    }
    _l2 = {
      hd: l1.hd,
      tl: l2,
    };
    _l1 = l1.tl;
    continue;
  }
}

function rev(l) {
  return rev_append(l, /* [] */ 0);
}

function init_dps(_dst, _offset, _i, last, f) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var i = _i;
    if (i > last) {
      dst[offset] = /* [] */ 0;
      return;
    }
    if (i === last) {
      dst[offset] = {
        hd: Curry._1(f, i),
        tl: /* [] */ 0,
      };
      return;
    }
    var r1 = Curry._1(f, i);
    var r2 = Curry._1(f, (i + 1) | 0);
    var block = {
      hd: r2,
      tl: 24029,
    };
    dst[offset] = {
      hd: r1,
      tl: block,
    };
    _i = (i + 2) | 0;
    _offset = "tl";
    _dst = block;
    continue;
  }
}

function init(len, f) {
  if (len < 0) {
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.init",
      Error: new Error(),
    };
  }
  var i = 0;
  var last = (len - 1) | 0;
  if (i > last) {
    return /* [] */ 0;
  }
  if (i === last) {
    return {
      hd: Curry._1(f, i),
      tl: /* [] */ 0,
    };
  }
  var r1 = Curry._1(f, i);
  var r2 = Curry._1(f, (i + 1) | 0);
  var block = {
    hd: r2,
    tl: 24029,
  };
  return {
    hd: r1,
    tl: (init_dps(block, "tl", (i + 2) | 0, last, f), block),
  };
}

function flatten(param) {
  if (param) {
    return Stdlib.$at(param.hd, flatten(param.tl));
  } else {
    return /* [] */ 0;
  }
}

function map_dps(_dst, _offset, f, _param) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var param = _param;
    if (!param) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var match = param.tl;
    var a1 = param.hd;
    if (match) {
      var r1 = Curry._1(f, a1);
      var r2 = Curry._1(f, match.hd);
      var block = {
        hd: r2,
        tl: 24029,
      };
      dst[offset] = {
        hd: r1,
        tl: block,
      };
      _param = match.tl;
      _offset = "tl";
      _dst = block;
      continue;
    }
    var r1$1 = Curry._1(f, a1);
    dst[offset] = {
      hd: r1$1,
      tl: /* [] */ 0,
    };
    return;
  }
}

function map(f, param) {
  if (!param) {
    return /* [] */ 0;
  }
  var match = param.tl;
  var a1 = param.hd;
  if (match) {
    var r1 = Curry._1(f, a1);
    var r2 = Curry._1(f, match.hd);
    var block = {
      hd: r2,
      tl: 24029,
    };
    return {
      hd: r1,
      tl: (map_dps(block, "tl", f, match.tl), block),
    };
  }
  var r1$1 = Curry._1(f, a1);
  return {
    hd: r1$1,
    tl: /* [] */ 0,
  };
}

function mapi_dps(_dst, _offset, _i, f, _param) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var i = _i;
    var param = _param;
    if (!param) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var match = param.tl;
    var a1 = param.hd;
    if (match) {
      var r1 = Curry._2(f, i, a1);
      var r2 = Curry._2(f, (i + 1) | 0, match.hd);
      var block = {
        hd: r2,
        tl: 24029,
      };
      dst[offset] = {
        hd: r1,
        tl: block,
      };
      _param = match.tl;
      _i = (i + 2) | 0;
      _offset = "tl";
      _dst = block;
      continue;
    }
    var r1$1 = Curry._2(f, i, a1);
    dst[offset] = {
      hd: r1$1,
      tl: /* [] */ 0,
    };
    return;
  }
}

function mapi(f, l) {
  var i = 0;
  if (!l) {
    return /* [] */ 0;
  }
  var match = l.tl;
  var a1 = l.hd;
  if (match) {
    var r1 = Curry._2(f, i, a1);
    var r2 = Curry._2(f, (i + 1) | 0, match.hd);
    var block = {
      hd: r2,
      tl: 24029,
    };
    return {
      hd: r1,
      tl: (mapi_dps(block, "tl", (i + 2) | 0, f, match.tl), block),
    };
  }
  var r1$1 = Curry._2(f, i, a1);
  return {
    hd: r1$1,
    tl: /* [] */ 0,
  };
}

function rev_map(f, l) {
  var _accu = /* [] */ 0;
  var _param = l;
  while (true) {
    var param = _param;
    var accu = _accu;
    if (!param) {
      return accu;
    }
    _param = param.tl;
    _accu = {
      hd: Curry._1(f, param.hd),
      tl: accu,
    };
    continue;
  }
}

function iter(f, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return;
    }
    Curry._1(f, param.hd);
    _param = param.tl;
    continue;
  }
}

function iteri(f, l) {
  var _i = 0;
  var _param = l;
  while (true) {
    var param = _param;
    var i = _i;
    if (!param) {
      return;
    }
    Curry._2(f, i, param.hd);
    _param = param.tl;
    _i = (i + 1) | 0;
    continue;
  }
}

function fold_left(f, _accu, _l) {
  while (true) {
    var l = _l;
    var accu = _accu;
    if (!l) {
      return accu;
    }
    _l = l.tl;
    _accu = Curry._2(f, accu, l.hd);
    continue;
  }
}

function fold_right(f, l, accu) {
  if (l) {
    return Curry._2(f, l.hd, fold_right(f, l.tl, accu));
  } else {
    return accu;
  }
}

function map2_dps(_dst, _offset, f, _l1, _l2) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var l1 = _l1;
    var l2 = _l2;
    if (l1) {
      var match = l1.tl;
      var a1 = l1.hd;
      if (match) {
        if (l2) {
          var match$1 = l2.tl;
          if (match$1) {
            var r1 = Curry._2(f, a1, l2.hd);
            var r2 = Curry._2(f, match.hd, match$1.hd);
            var block = {
              hd: r2,
              tl: 24029,
            };
            dst[offset] = {
              hd: r1,
              tl: block,
            };
            _l2 = match$1.tl;
            _l1 = match.tl;
            _offset = "tl";
            _dst = block;
            continue;
          }
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.map2",
            Error: new Error(),
          };
          dst[offset] = undefined;
          return;
        }
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.map2",
          Error: new Error(),
        };
        dst[offset] = undefined;
        return;
      }
      if (l2) {
        if (l2.tl) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.map2",
            Error: new Error(),
          };
          dst[offset] = undefined;
          return;
        }
        var r1$1 = Curry._2(f, a1, l2.hd);
        dst[offset] = {
          hd: r1$1,
          tl: /* [] */ 0,
        };
        return;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.map2",
        Error: new Error(),
      };
      dst[offset] = undefined;
      return;
    }
    if (!l2) {
      dst[offset] = /* [] */ 0;
      return;
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.map2",
      Error: new Error(),
    };
    dst[offset] = undefined;
    return;
  }
}

function map2(f, l1, l2) {
  if (l1) {
    var match = l1.tl;
    var a1 = l1.hd;
    if (match) {
      if (l2) {
        var match$1 = l2.tl;
        if (match$1) {
          var r1 = Curry._2(f, a1, l2.hd);
          var r2 = Curry._2(f, match.hd, match$1.hd);
          var block = {
            hd: r2,
            tl: 24029,
          };
          return {
            hd: r1,
            tl: (map2_dps(block, "tl", f, match.tl, match$1.tl), block),
          };
        }
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.map2",
          Error: new Error(),
        };
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.map2",
        Error: new Error(),
      };
    }
    if (l2) {
      if (l2.tl) {
        throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.map2",
          Error: new Error(),
        };
      }
      var r1$1 = Curry._2(f, a1, l2.hd);
      return {
        hd: r1$1,
        tl: /* [] */ 0,
      };
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.map2",
      Error: new Error(),
    };
  }
  if (!l2) {
    return /* [] */ 0;
  }
  throw {
    RE_EXN_ID: "Invalid_argument",
    _1: "List.map2",
    Error: new Error(),
  };
}

function rev_map2(f, l1, l2) {
  var _accu = /* [] */ 0;
  var _l1 = l1;
  var _l2 = l2;
  while (true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    var accu = _accu;
    if (l1$1) {
      if (l2$1) {
        _l2 = l2$1.tl;
        _l1 = l1$1.tl;
        _accu = {
          hd: Curry._2(f, l1$1.hd, l2$1.hd),
          tl: accu,
        };
        continue;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.rev_map2",
        Error: new Error(),
      };
    }
    if (l2$1) {
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.rev_map2",
        Error: new Error(),
      };
    }
    return accu;
  }
}

function iter2(f, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        Curry._2(f, l1.hd, l2.hd);
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.iter2",
        Error: new Error(),
      };
    }
    if (!l2) {
      return;
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.iter2",
      Error: new Error(),
    };
  }
}

function fold_left2(f, _accu, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    var accu = _accu;
    if (l1) {
      if (l2) {
        _l2 = l2.tl;
        _l1 = l1.tl;
        _accu = Curry._3(f, accu, l1.hd, l2.hd);
        continue;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.fold_left2",
        Error: new Error(),
      };
    }
    if (l2) {
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.fold_left2",
        Error: new Error(),
      };
    }
    return accu;
  }
}

function fold_right2(f, l1, l2, accu) {
  if (l1) {
    if (l2) {
      return Curry._3(f, l1.hd, l2.hd, fold_right2(f, l1.tl, l2.tl, accu));
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.fold_right2",
      Error: new Error(),
    };
  }
  if (l2) {
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.fold_right2",
      Error: new Error(),
    };
  }
  return accu;
}

function for_all(p, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return true;
    }
    if (!Curry._1(p, param.hd)) {
      return false;
    }
    _param = param.tl;
    continue;
  }
}

function exists(p, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Curry._1(p, param.hd)) {
      return true;
    }
    _param = param.tl;
    continue;
  }
}

function for_all2(p, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (!Curry._2(p, l1.hd, l2.hd)) {
          return false;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.for_all2",
        Error: new Error(),
      };
    }
    if (!l2) {
      return true;
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.for_all2",
      Error: new Error(),
    };
  }
}

function exists2(p, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1.hd, l2.hd)) {
          return true;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue;
      }
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.exists2",
        Error: new Error(),
      };
    }
    if (!l2) {
      return false;
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.exists2",
      Error: new Error(),
    };
  }
}

function mem(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd, x)) {
      return true;
    }
    _param = param.tl;
    continue;
  }
}

function memq(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (param.hd === x) {
      return true;
    }
    _param = param.tl;
    continue;
  }
}

function assoc(x, _param) {
  while (true) {
    var param = _param;
    if (param) {
      var match = param.hd;
      if (Caml_obj.caml_equal(match[0], x)) {
        return match[1];
      }
      _param = param.tl;
      continue;
    }
    throw {
      RE_EXN_ID: Stdlib.Not_found,
      Error: new Error(),
    };
  }
}

function assoc_opt(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return;
    }
    var match = param.hd;
    if (Caml_obj.caml_equal(match[0], x)) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue;
  }
}

function assq(x, _param) {
  while (true) {
    var param = _param;
    if (param) {
      var match = param.hd;
      if (match[0] === x) {
        return match[1];
      }
      _param = param.tl;
      continue;
    }
    throw {
      RE_EXN_ID: Stdlib.Not_found,
      Error: new Error(),
    };
  }
}

function assq_opt(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return;
    }
    var match = param.hd;
    if (match[0] === x) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue;
  }
}

function mem_assoc(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd[0], x)) {
      return true;
    }
    _param = param.tl;
    continue;
  }
}

function mem_assq(x, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (param.hd[0] === x) {
      return true;
    }
    _param = param.tl;
    continue;
  }
}

function remove_assoc(x, param) {
  if (!param) {
    return /* [] */ 0;
  }
  var l = param.tl;
  var pair = param.hd;
  if (Caml_obj.caml_equal(pair[0], x)) {
    return l;
  } else {
    return {
      hd: pair,
      tl: remove_assoc(x, l),
    };
  }
}

function remove_assq(x, param) {
  if (!param) {
    return /* [] */ 0;
  }
  var l = param.tl;
  var pair = param.hd;
  if (pair[0] === x) {
    return l;
  } else {
    return {
      hd: pair,
      tl: remove_assq(x, l),
    };
  }
}

function find(p, _param) {
  while (true) {
    var param = _param;
    if (param) {
      var x = param.hd;
      if (Curry._1(p, x)) {
        return x;
      }
      _param = param.tl;
      continue;
    }
    throw {
      RE_EXN_ID: Stdlib.Not_found,
      Error: new Error(),
    };
  }
}

function find_opt(p, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return;
    }
    var x = param.hd;
    if (Curry._1(p, x)) {
      return Caml_option.some(x);
    }
    _param = param.tl;
    continue;
  }
}

function find_index(p) {
  return function (param) {
    var _i = 0;
    var _param = param;
    while (true) {
      var param$1 = _param;
      var i = _i;
      if (!param$1) {
        return;
      }
      if (Curry._1(p, param$1.hd)) {
        return i;
      }
      _param = param$1.tl;
      _i = (i + 1) | 0;
      continue;
    }
  };
}

function find_map(f, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return;
    }
    var result = Curry._1(f, param.hd);
    if (result !== undefined) {
      return result;
    }
    _param = param.tl;
    continue;
  }
}

function find_mapi(f) {
  return function (param) {
    var _i = 0;
    var _param = param;
    while (true) {
      var param$1 = _param;
      var i = _i;
      if (!param$1) {
        return;
      }
      var result = Curry._2(f, i, param$1.hd);
      if (result !== undefined) {
        return result;
      }
      _param = param$1.tl;
      _i = (i + 1) | 0;
      continue;
    }
  };
}

function find_all(p, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return /* [] */ 0;
    }
    var l = param.tl;
    var x = param.hd;
    if (Curry._1(p, x)) {
      var block = {
        hd: x,
        tl: 24029,
      };
      find_all_dps(block, "tl", p, l);
      return block;
    }
    _param = l;
    continue;
  }
}

function find_all_dps(_dst, _offset, p, _param) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var param = _param;
    if (!param) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var l = param.tl;
    var x = param.hd;
    if (Curry._1(p, x)) {
      var block = {
        hd: x,
        tl: 24029,
      };
      dst[offset] = block;
      _param = l;
      _offset = "tl";
      _dst = block;
      continue;
    }
    _param = l;
    continue;
  }
}

function filteri_dps(_dst, _offset, p, _i, _param) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var i = _i;
    var param = _param;
    if (!param) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var l = param.tl;
    var x = param.hd;
    var i$p = (i + 1) | 0;
    if (Curry._2(p, i, x)) {
      var block = {
        hd: x,
        tl: 24029,
      };
      dst[offset] = block;
      _param = l;
      _i = i$p;
      _offset = "tl";
      _dst = block;
      continue;
    }
    _param = l;
    _i = i$p;
    continue;
  }
}

function filteri(p, l) {
  var _i = 0;
  var _param = l;
  while (true) {
    var param = _param;
    var i = _i;
    if (!param) {
      return /* [] */ 0;
    }
    var l$1 = param.tl;
    var x = param.hd;
    var i$p = (i + 1) | 0;
    if (Curry._2(p, i, x)) {
      var block = {
        hd: x,
        tl: 24029,
      };
      filteri_dps(block, "tl", p, i$p, l$1);
      return block;
    }
    _param = l$1;
    _i = i$p;
    continue;
  }
}

function filter_map(f, _param) {
  while (true) {
    var param = _param;
    if (!param) {
      return /* [] */ 0;
    }
    var l = param.tl;
    var v = Curry._1(f, param.hd);
    if (v !== undefined) {
      var block = {
        hd: Caml_option.valFromOption(v),
        tl: 24029,
      };
      filter_map_dps(block, "tl", f, l);
      return block;
    }
    _param = l;
    continue;
  }
}

function filter_map_dps(_dst, _offset, f, _param) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var param = _param;
    if (!param) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var l = param.tl;
    var v = Curry._1(f, param.hd);
    if (v !== undefined) {
      var block = {
        hd: Caml_option.valFromOption(v),
        tl: 24029,
      };
      dst[offset] = block;
      _param = l;
      _offset = "tl";
      _dst = block;
      continue;
    }
    _param = l;
    continue;
  }
}

function concat_map(f, param) {
  if (param) {
    var ys = Curry._1(f, param.hd);
    var xs = param.tl;
    if (!ys) {
      return concat_map(f, xs);
    }
    var block = {
      hd: ys.hd,
      tl: 24029,
    };
    prepend_concat_map_dps(block, "tl", ys.tl, f, xs);
    return block;
  } else {
    return /* [] */ 0;
  }
}

function prepend_concat_map_dps(_dst, _offset, _ys, f, xs) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var ys = _ys;
    if (!ys) {
      if (xs) {
        return prepend_concat_map_dps(
          dst,
          offset,
          Curry._1(f, xs.hd),
          f,
          xs.tl,
        );
      } else {
        dst[offset] = /* [] */ 0;
        return;
      }
    }
    var block = {
      hd: ys.hd,
      tl: 24029,
    };
    dst[offset] = block;
    _ys = ys.tl;
    _offset = "tl";
    _dst = block;
    continue;
  }
}

function fold_left_map(f, accu, l) {
  var _accu = accu;
  var _l_accu = /* [] */ 0;
  var _param = l;
  while (true) {
    var param = _param;
    var l_accu = _l_accu;
    var accu$1 = _accu;
    if (!param) {
      return [accu$1, rev_append(l_accu, /* [] */ 0)];
    }
    var match = Curry._2(f, accu$1, param.hd);
    _param = param.tl;
    _l_accu = {
      hd: match[1],
      tl: l_accu,
    };
    _accu = match[0];
    continue;
  }
}

function partition(p, l) {
  var _yes = /* [] */ 0;
  var _no = /* [] */ 0;
  var _param = l;
  while (true) {
    var param = _param;
    var no = _no;
    var yes = _yes;
    if (!param) {
      return [rev_append(yes, /* [] */ 0), rev_append(no, /* [] */ 0)];
    }
    var l$1 = param.tl;
    var x = param.hd;
    if (Curry._1(p, x)) {
      _param = l$1;
      _yes = {
        hd: x,
        tl: yes,
      };
      continue;
    }
    _param = l$1;
    _no = {
      hd: x,
      tl: no,
    };
    continue;
  }
}

function partition_map(p, l) {
  var _left = /* [] */ 0;
  var _right = /* [] */ 0;
  var _param = l;
  while (true) {
    var param = _param;
    var right = _right;
    var left = _left;
    if (!param) {
      return [rev_append(left, /* [] */ 0), rev_append(right, /* [] */ 0)];
    }
    var l$1 = param.tl;
    var v = Curry._1(p, param.hd);
    if (v.TAG === /* Left */ 0) {
      _param = l$1;
      _left = {
        hd: v._0,
        tl: left,
      };
      continue;
    }
    _param = l$1;
    _right = {
      hd: v._0,
      tl: right,
    };
    continue;
  }
}

function split(param) {
  if (!param) {
    return [/* [] */ 0, /* [] */ 0];
  }
  var match = param.hd;
  var match$1 = split(param.tl);
  return [
    {
      hd: match[0],
      tl: match$1[0],
    },
    {
      hd: match[1],
      tl: match$1[1],
    },
  ];
}

function combine(l1, l2) {
  if (l1) {
    if (l2) {
      return {
        hd: [l1.hd, l2.hd],
        tl: combine(l1.tl, l2.tl),
      };
    }
    throw {
      RE_EXN_ID: "Invalid_argument",
      _1: "List.combine",
      Error: new Error(),
    };
  }
  if (!l2) {
    return /* [] */ 0;
  }
  throw {
    RE_EXN_ID: "Invalid_argument",
    _1: "List.combine",
    Error: new Error(),
  };
}

function merge(cmp, l1, l2) {
  if (!l1) {
    return l2;
  }
  if (!l2) {
    return l1;
  }
  var h2 = l2.hd;
  var h1 = l1.hd;
  if (Curry._2(cmp, h1, h2) <= 0) {
    return {
      hd: h1,
      tl: merge(cmp, l1.tl, l2),
    };
  } else {
    return {
      hd: h2,
      tl: merge(cmp, l1, l2.tl),
    };
  }
}

function stable_sort(cmp, l) {
  var rev_merge = function (_l1, _l2, _accu) {
    while (true) {
      var accu = _accu;
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      var h2 = l2.hd;
      var h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) <= 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l1 = l1.tl;
        continue;
      }
      _accu = {
        hd: h2,
        tl: accu,
      };
      _l2 = l2.tl;
      continue;
    }
  };
  var rev_merge_rev = function (_l1, _l2, _accu) {
    while (true) {
      var accu = _accu;
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      var h2 = l2.hd;
      var h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) > 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l1 = l1.tl;
        continue;
      }
      _accu = {
        hd: h2,
        tl: accu,
      };
      _l2 = l2.tl;
      continue;
    }
  };
  var sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var s =
              Curry._2(cmp, x1, x2) <= 0
                ? Curry._2(cmp, x2, x3) <= 0
                  ? {
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                  : Curry._2(cmp, x1, x3) <= 0
                  ? {
                      hd: x1,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                  : {
                      hd: x3,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                : Curry._2(cmp, x1, x3) <= 0
                ? {
                    hd: x2,
                    tl: {
                      hd: x1,
                      tl: {
                        hd: x3,
                        tl: /* [] */ 0,
                      },
                    },
                  }
                : Curry._2(cmp, x2, x3) <= 0
                ? {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: {
                        hd: x1,
                        tl: /* [] */ 0,
                      },
                    },
                  }
                : {
                    hd: x3,
                    tl: {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */ 0,
                      },
                    },
                  };
            return [s, match$1.tl];
          }
        }
      }
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var s$1 =
          Curry._2(cmp, x1$1, x2$1) <= 0
            ? {
                hd: x1$1,
                tl: {
                  hd: x2$1,
                  tl: /* [] */ 0,
                },
              }
            : {
                hd: x2$1,
                tl: {
                  hd: x1$1,
                  tl: /* [] */ 0,
                },
              };
        return [s$1, match$2.tl];
      }
    }
    var n1 = n >> 1;
    var n2 = (n - n1) | 0;
    var match$3 = rev_sort(n1, l);
    var match$4 = rev_sort(n2, match$3[1]);
    return [rev_merge_rev(match$3[0], match$4[0], /* [] */ 0), match$4[1]];
  };
  var rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var s =
              Curry._2(cmp, x1, x2) > 0
                ? Curry._2(cmp, x2, x3) > 0
                  ? {
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                  : Curry._2(cmp, x1, x3) > 0
                  ? {
                      hd: x1,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                  : {
                      hd: x3,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      },
                    }
                : Curry._2(cmp, x1, x3) > 0
                ? {
                    hd: x2,
                    tl: {
                      hd: x1,
                      tl: {
                        hd: x3,
                        tl: /* [] */ 0,
                      },
                    },
                  }
                : Curry._2(cmp, x2, x3) > 0
                ? {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: {
                        hd: x1,
                        tl: /* [] */ 0,
                      },
                    },
                  }
                : {
                    hd: x3,
                    tl: {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */ 0,
                      },
                    },
                  };
            return [s, match$1.tl];
          }
        }
      }
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var s$1 =
          Curry._2(cmp, x1$1, x2$1) > 0
            ? {
                hd: x1$1,
                tl: {
                  hd: x2$1,
                  tl: /* [] */ 0,
                },
              }
            : {
                hd: x2$1,
                tl: {
                  hd: x1$1,
                  tl: /* [] */ 0,
                },
              };
        return [s$1, match$2.tl];
      }
    }
    var n1 = n >> 1;
    var n2 = (n - n1) | 0;
    var match$3 = sort(n1, l);
    var match$4 = sort(n2, match$3[1]);
    return [rev_merge(match$3[0], match$4[0], /* [] */ 0), match$4[1]];
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l)[0];
  }
}

function sort_uniq(cmp, l) {
  var rev_merge = function (_l1, _l2, _accu) {
    while (true) {
      var accu = _accu;
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      var t2 = l2.tl;
      var h2 = l2.hd;
      var t1 = l1.tl;
      var h1 = l1.hd;
      var c = Curry._2(cmp, h1, h2);
      if (c === 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l2 = t2;
        _l1 = t1;
        continue;
      }
      if (c < 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l1 = t1;
        continue;
      }
      _accu = {
        hd: h2,
        tl: accu,
      };
      _l2 = t2;
      continue;
    }
  };
  var rev_merge_rev = function (_l1, _l2, _accu) {
    while (true) {
      var accu = _accu;
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      var t2 = l2.tl;
      var h2 = l2.hd;
      var t1 = l1.tl;
      var h1 = l1.hd;
      var c = Curry._2(cmp, h1, h2);
      if (c === 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l2 = t2;
        _l1 = t1;
        continue;
      }
      if (c > 0) {
        _accu = {
          hd: h1,
          tl: accu,
        };
        _l1 = t1;
        continue;
      }
      _accu = {
        hd: h2,
        tl: accu,
      };
      _l2 = t2;
      continue;
    }
  };
  var sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var c = Curry._2(cmp, x1, x2);
            var s;
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              s =
                c$1 === 0
                  ? {
                      hd: x2,
                      tl: /* [] */ 0,
                    }
                  : c$1 < 0
                  ? {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: /* [] */ 0,
                      },
                    }
                  : {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: /* [] */ 0,
                      },
                    };
            } else if (c < 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: /* [] */ 0,
                  },
                };
              } else if (c$2 < 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: /* [] */ 0,
                    },
                  },
                };
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                s =
                  c$3 === 0
                    ? {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      }
                    : c$3 < 0
                    ? {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */ 0,
                          },
                        },
                      }
                    : {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */ 0,
                          },
                        },
                      };
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: /* [] */ 0,
                  },
                };
              } else if (c$4 < 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: {
                      hd: x3,
                      tl: /* [] */ 0,
                    },
                  },
                };
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                s =
                  c$5 === 0
                    ? {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */ 0,
                        },
                      }
                    : c$5 < 0
                    ? {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: /* [] */ 0,
                          },
                        },
                      }
                    : {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x1,
                            tl: /* [] */ 0,
                          },
                        },
                      };
              }
            }
            return [s, match$1.tl];
          }
        }
      }
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        var s$1 =
          c$6 === 0
            ? {
                hd: x1$1,
                tl: /* [] */ 0,
              }
            : c$6 < 0
            ? {
                hd: x1$1,
                tl: {
                  hd: x2$1,
                  tl: /* [] */ 0,
                },
              }
            : {
                hd: x2$1,
                tl: {
                  hd: x1$1,
                  tl: /* [] */ 0,
                },
              };
        return [s$1, match$2.tl];
      }
    }
    var n1 = n >> 1;
    var n2 = (n - n1) | 0;
    var match$3 = rev_sort(n1, l);
    var match$4 = rev_sort(n2, match$3[1]);
    return [rev_merge_rev(match$3[0], match$4[0], /* [] */ 0), match$4[1]];
  };
  var rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var c = Curry._2(cmp, x1, x2);
            var s;
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              s =
                c$1 === 0
                  ? {
                      hd: x2,
                      tl: /* [] */ 0,
                    }
                  : c$1 > 0
                  ? {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: /* [] */ 0,
                      },
                    }
                  : {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: /* [] */ 0,
                      },
                    };
            } else if (c > 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: /* [] */ 0,
                  },
                };
              } else if (c$2 > 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: /* [] */ 0,
                    },
                  },
                };
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                s =
                  c$3 === 0
                    ? {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */ 0,
                        },
                      }
                    : c$3 > 0
                    ? {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */ 0,
                          },
                        },
                      }
                    : {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */ 0,
                          },
                        },
                      };
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: /* [] */ 0,
                  },
                };
              } else if (c$4 > 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: {
                      hd: x3,
                      tl: /* [] */ 0,
                    },
                  },
                };
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                s =
                  c$5 === 0
                    ? {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */ 0,
                        },
                      }
                    : c$5 > 0
                    ? {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: /* [] */ 0,
                          },
                        },
                      }
                    : {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x1,
                            tl: /* [] */ 0,
                          },
                        },
                      };
              }
            }
            return [s, match$1.tl];
          }
        }
      }
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        var s$1 =
          c$6 === 0
            ? {
                hd: x1$1,
                tl: /* [] */ 0,
              }
            : c$6 > 0
            ? {
                hd: x1$1,
                tl: {
                  hd: x2$1,
                  tl: /* [] */ 0,
                },
              }
            : {
                hd: x2$1,
                tl: {
                  hd: x1$1,
                  tl: /* [] */ 0,
                },
              };
        return [s$1, match$2.tl];
      }
    }
    var n1 = n >> 1;
    var n2 = (n - n1) | 0;
    var match$3 = sort(n1, l);
    var match$4 = sort(n2, match$3[1]);
    return [rev_merge(match$3[0], match$4[0], /* [] */ 0), match$4[1]];
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l)[0];
  }
}

function compare_lengths(_l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue;
  }
}

function compare_length_with(_l, _n) {
  while (true) {
    var n = _n;
    var l = _l;
    if (!l) {
      if (n === 0) {
        return 0;
      } else if (n > 0) {
        return -1;
      } else {
        return 1;
      }
    }
    if (n <= 0) {
      return 1;
    }
    _n = (n - 1) | 0;
    _l = l.tl;
    continue;
  }
}

function is_empty(param) {
  if (param) {
    return false;
  } else {
    return true;
  }
}

function equal(eq, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return false;
      } else {
        return true;
      }
    }
    if (!l2) {
      return false;
    }
    if (!Curry._2(eq, l1.hd, l2.hd)) {
      return false;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue;
  }
}

function compare(cmp, _l1, _l2) {
  while (true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    var c = Curry._2(cmp, l1.hd, l2.hd);
    if (c !== 0) {
      return c;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue;
  }
}

function to_seq(l) {
  var aux = function (l, param) {
    if (!l) {
      return /* Nil */ 0;
    }
    var tail = l.tl;
    return /* Cons */ {
      _0: l.hd,
      _1: function (param) {
        return aux(tail, param);
      },
    };
  };
  return function (param) {
    return aux(l, param);
  };
}

function of_seq_dps(_dst, _offset, _seq) {
  while (true) {
    var dst = _dst;
    var offset = _offset;
    var seq = _seq;
    var match = Curry._1(seq, undefined);
    if (!match) {
      dst[offset] = /* [] */ 0;
      return;
    }
    var x1 = match._0;
    var match$1 = Curry._1(match._1, undefined);
    if (!match$1) {
      dst[offset] = {
        hd: x1,
        tl: /* [] */ 0,
      };
      return;
    }
    var block = {
      hd: match$1._0,
      tl: 24029,
    };
    dst[offset] = {
      hd: x1,
      tl: block,
    };
    _seq = match$1._1;
    _offset = "tl";
    _dst = block;
    continue;
  }
}

function of_seq(seq) {
  var match = Curry._1(seq, undefined);
  if (!match) {
    return /* [] */ 0;
  }
  var x1 = match._0;
  var match$1 = Curry._1(match._1, undefined);
  if (!match$1) {
    return {
      hd: x1,
      tl: /* [] */ 0,
    };
  }
  var block = {
    hd: match$1._0,
    tl: 24029,
  };
  return {
    hd: x1,
    tl: (of_seq_dps(block, "tl", match$1._1), block),
  };
}

var append = Stdlib.$at;

var concat = flatten;

var filter = find_all;

var sort = stable_sort;

var fast_sort = stable_sort;

export {
  length,
  compare_lengths,
  compare_length_with,
  is_empty,
  cons,
  hd,
  tl,
  nth,
  nth_opt,
  rev,
  init,
  append,
  rev_append,
  concat,
  flatten,
  equal,
  compare,
  iter,
  iteri,
  map,
  mapi,
  rev_map,
  filter_map,
  concat_map,
  fold_left_map,
  fold_left,
  fold_right,
  iter2,
  map2,
  rev_map2,
  fold_left2,
  fold_right2,
  for_all,
  exists,
  for_all2,
  exists2,
  mem,
  memq,
  find,
  find_opt,
  find_index,
  find_map,
  find_mapi,
  filter,
  find_all,
  filteri,
  partition,
  partition_map,
  assoc,
  assoc_opt,
  assq,
  assq_opt,
  mem_assoc,
  mem_assq,
  remove_assoc,
  remove_assq,
  split,
  combine,
  sort,
  stable_sort,
  fast_sort,
  sort_uniq,
  merge,
  to_seq,
  of_seq,
};
/* No side effect */
