// Generated by Melange

import * as Caml_external_polyfill from "../melange.js/caml_external_polyfill.mjs";
import * as Stdlib__Sys from "./sys.mjs";

function is_block(a) {
  return typeof a !== "number";
}

function double_field(x, i) {
  return Caml_external_polyfill.resolve("caml_floatarray_get")(x, i);
}

function set_double_field(x, i, v) {
  Caml_external_polyfill.resolve("caml_floatarray_set")(x, i, v);
}

var Closure = {};

function of_val(x) {
  var slot = typeof x !== "number" && (x.TAG | 0) !== 248 && (x.length | 0) >= 1 ? x[0] : x;
  var name;
  if (typeof slot !== "number" && slot.TAG === 248) {
    name = slot[0];
  } else {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Obj.extension_constructor",
          Error: new Error()
        };
  }
  if (name.TAG === 252) {
    return slot;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Obj.extension_constructor",
        Error: new Error()
      };
}

function name(slot) {
  return slot[0];
}

function id(slot) {
  return slot[1];
}

var Extension_constructor = {
  of_val: of_val,
  name: name,
  id: id
};

var max_ephe_length = Stdlib__Sys.max_array_length - 2 | 0;

function create(l) {
  if (!(0 <= l && l <= max_ephe_length)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Obj.Ephemeron.create",
          Error: new Error()
        };
  }
  return Caml_external_polyfill.resolve("caml_ephe_create")(l);
}

function length(x) {
  return (x.length | 0) - 2 | 0;
}

function raise_if_invalid_offset(e, o, msg) {
  if (0 <= o && o < ((e.length | 0) - 2 | 0)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: msg,
        Error: new Error()
      };
}

function get_key(e, o) {
  raise_if_invalid_offset(e, o, "Obj.Ephemeron.get_key");
  return Caml_external_polyfill.resolve("caml_ephe_get_key")(e, o);
}

function get_key_copy(e, o) {
  raise_if_invalid_offset(e, o, "Obj.Ephemeron.get_key_copy");
  return Caml_external_polyfill.resolve("caml_ephe_get_key_copy")(e, o);
}

function set_key(e, o, x) {
  raise_if_invalid_offset(e, o, "Obj.Ephemeron.set_key");
  Caml_external_polyfill.resolve("caml_ephe_set_key")(e, o, x);
}

function unset_key(e, o) {
  raise_if_invalid_offset(e, o, "Obj.Ephemeron.unset_key");
  Caml_external_polyfill.resolve("caml_ephe_unset_key")(e, o);
}

function check_key(e, o) {
  raise_if_invalid_offset(e, o, "Obj.Ephemeron.check_key");
  return Caml_external_polyfill.resolve("caml_ephe_check_key")(e, o);
}

function blit_key(e1, o1, e2, o2, l) {
  if (l < 0 || o1 < 0 || o1 > (((e1.length | 0) - 2 | 0) - l | 0) || o2 < 0 || o2 > (((e2.length | 0) - 2 | 0) - l | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Obj.Ephemeron.blit_key",
          Error: new Error()
        };
  }
  if (l !== 0) {
    return Caml_external_polyfill.resolve("caml_ephe_blit_key")(e1, o1, e2, o2, l);
  }
  
}

var first_non_constant_constructor_tag = 0;

var last_non_constant_constructor_tag = 243;

var forcing_tag = 244;

var cont_tag = 245;

var lazy_tag = 246;

var closure_tag = 247;

var object_tag = 248;

var infix_tag = 249;

var forward_tag = 250;

var no_scan_tag = 251;

var abstract_tag = 251;

var string_tag = 252;

var double_tag = 253;

var double_array_tag = 254;

var custom_tag = 255;

var int_tag = 1000;

var out_of_heap_tag = 1001;

var unaligned_tag = 1002;

function Ephemeron_get_data(prim) {
  return Caml_external_polyfill.resolve("caml_ephe_get_data")(prim);
}

function Ephemeron_get_data_copy(prim) {
  return Caml_external_polyfill.resolve("caml_ephe_get_data_copy")(prim);
}

function Ephemeron_set_data(prim0, prim1) {
  return Caml_external_polyfill.resolve("caml_ephe_set_data")(prim0, prim1);
}

function Ephemeron_unset_data(prim) {
  return Caml_external_polyfill.resolve("caml_ephe_unset_data")(prim);
}

function Ephemeron_check_data(prim) {
  return Caml_external_polyfill.resolve("caml_ephe_check_data")(prim);
}

function Ephemeron_blit_data(prim0, prim1) {
  return Caml_external_polyfill.resolve("caml_ephe_blit_data")(prim0, prim1);
}

var Ephemeron = {
  create: create,
  length: length,
  get_key: get_key,
  get_key_copy: get_key_copy,
  set_key: set_key,
  unset_key: unset_key,
  check_key: check_key,
  blit_key: blit_key,
  get_data: Ephemeron_get_data,
  get_data_copy: Ephemeron_get_data_copy,
  set_data: Ephemeron_set_data,
  unset_data: Ephemeron_unset_data,
  check_data: Ephemeron_check_data,
  blit_data: Ephemeron_blit_data,
  max_ephe_length: max_ephe_length
};

export {
  is_block ,
  double_field ,
  set_double_field ,
  first_non_constant_constructor_tag ,
  last_non_constant_constructor_tag ,
  forcing_tag ,
  cont_tag ,
  lazy_tag ,
  closure_tag ,
  object_tag ,
  infix_tag ,
  forward_tag ,
  no_scan_tag ,
  abstract_tag ,
  string_tag ,
  double_tag ,
  double_array_tag ,
  custom_tag ,
  int_tag ,
  out_of_heap_tag ,
  unaligned_tag ,
  Closure ,
  Extension_constructor ,
  Ephemeron ,
}
/* No side effect */
