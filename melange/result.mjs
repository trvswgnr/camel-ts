// Generated by Melange

import * as Caml_option from "../melange.js/caml_option.mjs";
import * as Curry from "../melange.js/curry.mjs";
import * as Stdlib__Seq from "./seq.mjs";

function ok(v) {
  return {
    TAG: /* Ok */ 0,
    _0: v,
  };
}

function error(e) {
  return {
    TAG: /* Error */ 1,
    _0: e,
  };
}

function value(r, $$default) {
  if (r.TAG === /* Ok */ 0) {
    return r._0;
  } else {
    return $$default;
  }
}

function get_ok(param) {
  if (param.TAG === /* Ok */ 0) {
    return param._0;
  }
  throw {
    RE_EXN_ID: "Invalid_argument",
    _1: "result is Error _",
    Error: new Error(),
  };
}

function get_error(param) {
  if (param.TAG !== /* Ok */ 0) {
    return param._0;
  }
  throw {
    RE_EXN_ID: "Invalid_argument",
    _1: "result is Ok _",
    Error: new Error(),
  };
}

function bind(r, f) {
  if (r.TAG === /* Ok */ 0) {
    return Curry._1(f, r._0);
  } else {
    return r;
  }
}

function join(e) {
  if (e.TAG === /* Ok */ 0) {
    return e._0;
  } else {
    return e;
  }
}

function map(f, e) {
  if (e.TAG === /* Ok */ 0) {
    return {
      TAG: /* Ok */ 0,
      _0: Curry._1(f, e._0),
    };
  } else {
    return e;
  }
}

function map_error(f, v) {
  if (v.TAG === /* Ok */ 0) {
    return v;
  } else {
    return {
      TAG: /* Error */ 1,
      _0: Curry._1(f, v._0),
    };
  }
}

function fold(ok, error, param) {
  if (param.TAG === /* Ok */ 0) {
    return Curry._1(ok, param._0);
  } else {
    return Curry._1(error, param._0);
  }
}

function iter(f, param) {
  if (param.TAG === /* Ok */ 0) {
    return Curry._1(f, param._0);
  }
}

function iter_error(f, param) {
  if (param.TAG === /* Ok */ 0) {
    return;
  } else {
    return Curry._1(f, param._0);
  }
}

function is_ok(param) {
  if (param.TAG === /* Ok */ 0) {
    return true;
  } else {
    return false;
  }
}

function is_error(param) {
  if (param.TAG === /* Ok */ 0) {
    return false;
  } else {
    return true;
  }
}

function equal(ok, error, r0, r1) {
  if (r0.TAG === /* Ok */ 0) {
    if (r1.TAG === /* Ok */ 0) {
      return Curry._2(ok, r0._0, r1._0);
    } else {
      return false;
    }
  } else if (r1.TAG === /* Ok */ 0) {
    return false;
  } else {
    return Curry._2(error, r0._0, r1._0);
  }
}

function compare(ok, error, r0, r1) {
  if (r0.TAG === /* Ok */ 0) {
    if (r1.TAG === /* Ok */ 0) {
      return Curry._2(ok, r0._0, r1._0);
    } else {
      return -1;
    }
  } else if (r1.TAG === /* Ok */ 0) {
    return 1;
  } else {
    return Curry._2(error, r0._0, r1._0);
  }
}

function to_option(param) {
  if (param.TAG === /* Ok */ 0) {
    return Caml_option.some(param._0);
  }
}

function to_list(param) {
  if (param.TAG === /* Ok */ 0) {
    return {
      hd: param._0,
      tl: /* [] */ 0,
    };
  } else {
    return /* [] */ 0;
  }
}

function to_seq(param) {
  if (param.TAG !== /* Ok */ 0) {
    return Stdlib__Seq.empty;
  }
  var partial_arg = param._0;
  return function (param) {
    return Stdlib__Seq.$$return(partial_arg, param);
  };
}

export {
  ok,
  error,
  value,
  get_ok,
  get_error,
  bind,
  join,
  map,
  map_error,
  fold,
  iter,
  iter_error,
  is_ok,
  is_error,
  equal,
  compare,
  to_option,
  to_list,
  to_seq,
};
/* No side effect */
